import struct
import time
from datetime import datetime

import pika

from broker import get_channel
from car import Car
mock = b'u\xc9\xefb\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x01\x01\x00\x01\x02\x01\xfd\x01\x02\x00\x00\x00\x05\x00e\xa8E$\x01\x01\x00>\xcc\x00\x00\x0e\xea>j(\xba#\n\xddYp}\x08#A[C\x8c\x02\xe4\x9b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x01\x00\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\x8c?\x00\x00`@\x00\x00`@\x00\x00`@\x00\x00`@ff\x06@ff\x06@ff\x06@ff\x06@\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x05\x00\x05\x00\x03\x00\x18\x07\x0e\x0e\x08\xf1\r\x03\x02\x04\xe5\x07\x05\x14\x00\xee>\xc7G\x8b\xdfI@\x00\x84.\xe1\xd0[t3@\x00x\xabw\xabw\xab\xdfCx\xabw\xabw\xab\xdfCH@80( \x88C\x02\x01'

with get_channel() as channel:
    for i in range(100):
        carFrame = Car()
        carFrame.General.timestamp = struct.pack('Q', int(datetime.utcnow().timestamp()))
        carFrame.Gps.quality = struct.pack('B', 69)
        carFrame.Gps.timeMin = struct.pack('B', 1)
        carFrame.Gps.timeSec = struct.pack('B', 1)
        carFrame.Gps.timeHour = struct.pack('B', 1)
        carFrame.Gps.dateDay = struct.pack('B', 1)
        carFrame.Gps.dateMonth = struct.pack('B', 1)
        carFrame.Gps.dateYear = struct.pack('h', 1)

        channel.basic_publish(
            "amq.direct",
            'car',
            carFrame.to_bytes(),
            pika.BasicProperties(
                delivery_mode=pika.spec.PERSISTENT_DELIVERY_MODE,
            )
        )
        print("sent")
        time.sleep(0.1)
