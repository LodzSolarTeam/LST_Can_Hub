"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class EagleTwo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIMESTAMP_FIELD_NUMBER: builtins.int
    HANDBRAKE_FIELD_NUMBER: builtins.int
    BATT_ERROR_FIELD_NUMBER: builtins.int
    ENGINE_ERROR_FIELD_NUMBER: builtins.int
    HORN_FIELD_NUMBER: builtins.int
    BMS_REMAINING_CHARGE_TIME_FIELD_NUMBER: builtins.int
    BMS_CHARGE_EN_FIELD_NUMBER: builtins.int
    BMS_SYSTEM_STATE_FIELD_NUMBER: builtins.int
    BMS_PACK_C_RATE_FIELD_NUMBER: builtins.int
    BMS_SOC_FIELD_NUMBER: builtins.int
    BMS_SOH_FIELD_NUMBER: builtins.int
    BMS_CELLS_CONNECTED_FIELD_NUMBER: builtins.int
    BMS_REMAINING_ENERGY_FIELD_NUMBER: builtins.int
    BMS_RELAY_FAULT_FIELD_NUMBER: builtins.int
    BMS_K3_RELAY_STATE_FIELD_NUMBER: builtins.int
    BMS_K2_RELAY_STATE_FIELD_NUMBER: builtins.int
    BMS_K1_RELAY_STATE_FIELD_NUMBER: builtins.int
    BMS_BATTERY_IN_FAULT_STATE_FIELD_NUMBER: builtins.int
    BMS_PACK_TEMP_HIGH_FIELD_NUMBER: builtins.int
    BMS_LMU_W_HIGHEST_TEMP_FIELD_NUMBER: builtins.int
    BMS_PACK_TEMP_LOW_FIELD_NUMBER: builtins.int
    BMS_LMU_W_LOWEST_TEMP_FIELD_NUMBER: builtins.int
    BMS_POST_PROC_2_FIELD_NUMBER: builtins.int
    BMS_CELL_VOLTAGE_MAX_FIELD_NUMBER: builtins.int
    BMS_CELL_W_HIGHEST_VOLTAGE_FIELD_NUMBER: builtins.int
    BMS_CELL_VOLTAGE_MIN_FIELD_NUMBER: builtins.int
    BMS_CELL_W_LOWEST_VOLTAGE_FIELD_NUMBER: builtins.int
    BMS_AVG_CELL_VOLTAGE_FIELD_NUMBER: builtins.int
    BMS_PACK_VOLTAGE_FIELD_NUMBER: builtins.int
    BMS_PACK_CURRENT_FIELD_NUMBER: builtins.int
    BMS_ERROR_FLAGS_FIELD_NUMBER: builtins.int
    BMS_WARNING_FLAGS_FIELD_NUMBER: builtins.int
    MPPT_1_CURRENT_IN_FIELD_NUMBER: builtins.int
    MPPT_1_VOLTAGE_IN_FIELD_NUMBER: builtins.int
    MPPT_1_VOLTAGE_OUT_FIELD_NUMBER: builtins.int
    MPPT_1_MOSFET_TEMP_FIELD_NUMBER: builtins.int
    MPPT_1_PCB_TEMP_FIELD_NUMBER: builtins.int
    MPPT_1_POWER_IN_FIELD_NUMBER: builtins.int
    MPPT_2_CURRENT_IN_FIELD_NUMBER: builtins.int
    MPPT_2_VOLTAGE_IN_FIELD_NUMBER: builtins.int
    MPPT_2_VOLTAGE_OUT_FIELD_NUMBER: builtins.int
    MPPT_2_MOSFET_TEMP_FIELD_NUMBER: builtins.int
    MPPT_2_PCB_TEMP_FIELD_NUMBER: builtins.int
    MPPT_2_POWER_IN_FIELD_NUMBER: builtins.int
    MPPT_3_CURRENT_IN_FIELD_NUMBER: builtins.int
    MPPT_3_VOLTAGE_IN_FIELD_NUMBER: builtins.int
    MPPT_3_VOLTAGE_OUT_FIELD_NUMBER: builtins.int
    MPPT_3_MOSFET_TEMP_FIELD_NUMBER: builtins.int
    MPPT_3_PCB_TEMP_FIELD_NUMBER: builtins.int
    MPPT_3_POWER_IN_FIELD_NUMBER: builtins.int
    MPPT_4_CURRENT_IN_FIELD_NUMBER: builtins.int
    MPPT_4_VOLTAGE_IN_FIELD_NUMBER: builtins.int
    MPPT_4_VOLTAGE_OUT_FIELD_NUMBER: builtins.int
    MPPT_4_MOSFET_TEMP_FIELD_NUMBER: builtins.int
    MPPT_4_PCB_TEMP_FIELD_NUMBER: builtins.int
    MPPT_4_POWER_IN_FIELD_NUMBER: builtins.int
    STOP_FIELD_NUMBER: builtins.int
    LOW_BEAM_FIELD_NUMBER: builtins.int
    HIGH_BEAM_FIELD_NUMBER: builtins.int
    RIGHT_INDICATOR_FIELD_NUMBER: builtins.int
    LEFT_INDICATOR_FIELD_NUMBER: builtins.int
    PARK_FIELD_NUMBER: builtins.int
    INTERIOR_FIELD_NUMBER: builtins.int
    HAZARD_FIELD_NUMBER: builtins.int
    GPS_LATITUDE_FIELD_NUMBER: builtins.int
    GPS_LATITUDE_DIRECTION_FIELD_NUMBER: builtins.int
    GPS_LONGITUDE_FIELD_NUMBER: builtins.int
    GPS_LONGITUDE_DIRECTION_FIELD_NUMBER: builtins.int
    GPS_ALTITUDE_FIELD_NUMBER: builtins.int
    GPS_SPEED_KNOTS_FIELD_NUMBER: builtins.int
    GPS_SPEED_KILOMETERS_FIELD_NUMBER: builtins.int
    GPS_SATELLITES_NUMBER_FIELD_NUMBER: builtins.int
    GPS_QUALITY_FIELD_NUMBER: builtins.int
    PRESSURE_FRONT_LEFT_FIELD_NUMBER: builtins.int
    PRESSURE_FRONT_RIGHT_FIELD_NUMBER: builtins.int
    PRESSURE_REAR_LEFT_FIELD_NUMBER: builtins.int
    PRESSURE_REAR_RIGHT_FIELD_NUMBER: builtins.int
    TEMP_LEFT_MOTOR_FIELD_NUMBER: builtins.int
    TEMP_RIGHT_MOTOR_FIELD_NUMBER: builtins.int
    TEMP_RIGHT_DRIVER_FIELD_NUMBER: builtins.int
    TEMP_LEFT_DRIVER_FIELD_NUMBER: builtins.int
    MAIN_SWITCH_FIELD_NUMBER: builtins.int
    CRUISE_ON_FIELD_NUMBER: builtins.int
    CRUISE_ACTIVE_FIELD_NUMBER: builtins.int
    CRUISE_SET_SPEED_FIELD_NUMBER: builtins.int
    CRUISE_THROTTLE_FIELD_NUMBER: builtins.int
    THROTTLE_FIELD_NUMBER: builtins.int
    REGEN_FIELD_NUMBER: builtins.int
    DRIVEMODE_FIELD_NUMBER: builtins.int
    TIMESTAMP: builtins.int
    HANDBRAKE: builtins.bool
    """HANDBRAKE"""
    BATT_ERROR: builtins.bool
    """BATTERY_ERROR"""
    ENGINE_ERROR: builtins.bool
    """ENGINE_ERROR"""
    HORN: builtins.bool
    """HORN"""
    BMS_REMAINING_CHARGE_TIME: builtins.int
    """BMS_REMAINING_CHARGE_TIME"""
    BMS_CHARGE_EN: builtins.bool
    """BMS_CHARGE_EN"""
    BMS_SYSTEM_STATE: builtins.int
    """BMS_SYSTEM_STATE"""
    BMS_PACK_C_RATE: builtins.int
    """BMS_PACK_C_RATE"""
    BMS_SOC: builtins.int
    """BMS_SOC"""
    BMS_SOH: builtins.int
    """BMS_SOH"""
    BMS_CELLS_CONNECTED: builtins.int
    """BMS_CELLS_CONNECTED"""
    BMS_REMAINING_ENERGY: builtins.int
    """BMS_REMAINING_ENERGY"""
    BMS_RELAY_FAULT: builtins.bool
    """System State
    BMS_RELAY_FAULT
    """
    BMS_K3_RELAY_STATE: builtins.bool
    """BMS_K3_RELAY_STATE"""
    BMS_K2_RELAY_STATE: builtins.bool
    """BMS_K2_RELAY_STATE"""
    BMS_K1_RELAY_STATE: builtins.bool
    """BMS_K1_RELAY_STATE"""
    BMS_BATTERY_IN_FAULT_STATE: builtins.bool
    """BMS_BATTERY_IN_FAULT_STATE"""
    BMS_PACK_TEMP_HIGH: builtins.int
    """Temperatures
    BMS_PACK_TEMP_HIGH
    """
    BMS_LMU_W_HIGHEST_TEMP: builtins.int
    """BMS_LMU_W_HIGHEST_TEMP"""
    BMS_PACK_TEMP_LOW: builtins.int
    """BMS_PACK_TEMP_LOW"""
    BMS_LMU_W_LOWEST_TEMP: builtins.int
    """BMS_LMU_W_LOWEST_TEMP"""
    BMS_POST_PROC_2: builtins.int
    """Voltages
    BMS_POST_PROC_2 FIXME trzeba sie upewnic
    """
    BMS_CELL_VOLTAGE_MAX: builtins.int
    """BMS_CELL_VOLTAGE_MAX"""
    BMS_CELL_W_HIGHEST_VOLTAGE: builtins.int
    """BMS_CELL_W_HIGHEST_VOLTAGE"""
    BMS_CELL_VOLTAGE_MIN: builtins.int
    """BMS_CELL_VOLTAGE_MIN"""
    BMS_CELL_W_LOWEST_VOLTAGE: builtins.int
    """BMS_CELL_W_LOWEST_VOLTAGE"""
    BMS_AVG_CELL_VOLTAGE: builtins.int
    """BMS_AVG_CELL_VOLTAGE"""
    BMS_PACK_VOLTAGE: builtins.int
    """BMS_PACK_VOLTAGE"""
    BMS_PACK_CURRENT: builtins.int
    """BMS_PACK_CURRENT"""
    BMS_ERROR_FLAGS: builtins.int
    BMS_WARNING_FLAGS: builtins.int
    MPPT_1_Current_IN: builtins.float
    """MPPT_x_Current_IN"""
    MPPT_1_Voltage_IN: builtins.float
    """MPPT_x_Voltage_IN"""
    MPPT_1_Voltage_OUT: builtins.float
    """MPPT_x_Voltage_OUT"""
    MPPT_1_MOSFET_TEMP: builtins.int
    """MPPT_x_MOSFET_TEMP"""
    MPPT_1_PCB_TEMP: builtins.int
    """MPPT_x_PCB_TEMP"""
    MPPT_1_Power_IN: builtins.float
    """MPPT_x_Power_IN"""
    MPPT_2_Current_IN: builtins.float
    """MPPT_x_Current_IN"""
    MPPT_2_Voltage_IN: builtins.float
    """MPPT_x_Voltage_IN"""
    MPPT_2_Voltage_OUT: builtins.float
    """MPPT_x_Voltage_OUT"""
    MPPT_2_MOSFET_TEMP: builtins.int
    """MPPT_x_MOSFET_TEMP"""
    MPPT_2_PCB_TEMP: builtins.int
    """MPPT_x_PCB_TEMP"""
    MPPT_2_Power_IN: builtins.float
    """MPPT_x_Power_IN"""
    MPPT_3_Current_IN: builtins.float
    """MPPT_x_Current_IN"""
    MPPT_3_Voltage_IN: builtins.float
    """MPPT_x_Voltage_IN"""
    MPPT_3_Voltage_OUT: builtins.float
    """MPPT_x_Voltage_OUT"""
    MPPT_3_MOSFET_TEMP: builtins.int
    """MPPT_x_MOSFET_TEMP"""
    MPPT_3_PCB_TEMP: builtins.int
    """MPPT_x_PCB_TEMP"""
    MPPT_3_Power_IN: builtins.float
    """MPPT_x_Power_IN"""
    MPPT_4_Current_IN: builtins.float
    """MPPT_x_Current_IN"""
    MPPT_4_Voltage_IN: builtins.float
    """MPPT_x_Voltage_IN"""
    MPPT_4_Voltage_OUT: builtins.float
    """MPPT_x_Voltage_OUT"""
    MPPT_4_MOSFET_TEMP: builtins.int
    """MPPT_x_MOSFET_TEMP"""
    MPPT_4_PCB_TEMP: builtins.int
    """MPPT_x_PCB_TEMP"""
    MPPT_4_Power_IN: builtins.float
    """MPPT_x_Power_IN"""
    STOP: builtins.bool
    """STOP"""
    LOW_BEAM: builtins.bool
    """LOW_BEAM"""
    HIGH_BEAM: builtins.bool
    """HIGH_BEAM"""
    RIGHT_INDICATOR: builtins.bool
    """RIGHT_INDICATOR"""
    LEFT_INDICATOR: builtins.bool
    """LEFT_INDICATOR"""
    PARK: builtins.bool
    """PARK"""
    INTERIOR: builtins.bool
    """INTERIOR"""
    HAZARD: builtins.bool
    """HAZARD"""
    GPS_LATITUDE: builtins.float
    GPS_LATITUDE_DIRECTION: builtins.str
    GPS_LONGITUDE: builtins.float
    GPS_LONGITUDE_DIRECTION: builtins.str
    GPS_ALTITUDE: builtins.float
    GPS_SPEED_KNOTS: builtins.float
    GPS_SPEED_KILOMETERS: builtins.float
    GPS_SATELLITES_NUMBER: builtins.int
    GPS_QUALITY: builtins.int
    PRESSURE_FRONT_LEFT: builtins.int
    """TPMS_INFO->PRESSURE_FRONT_LEFT"""
    PRESSURE_FRONT_RIGHT: builtins.int
    """TPMS_INFO->PRESSURE_FRONT_RIGHT"""
    PRESSURE_REAR_LEFT: builtins.int
    """TPMS_INFO->PRESSURE_REAR_LEFT"""
    PRESSURE_REAR_RIGHT: builtins.int
    """TPMS_INFO->PRESSURE_REAR_RIGHT"""
    TEMP_LEFT_MOTOR: builtins.float
    """w1thermalsensors"""
    TEMP_RIGHT_MOTOR: builtins.float
    """w1thermalsensors"""
    TEMP_RIGHT_DRIVER: builtins.float
    """w1thermalsensors"""
    TEMP_LEFT_DRIVER: builtins.float
    """w1thermalsensors"""
    MAIN_SWITCH: builtins.bool
    CRUISE_ON: builtins.bool
    """CRUISE_ON"""
    CRUISE_ACTIVE: builtins.bool
    """CRUISE_ACTIVE"""
    CRUISE_SET_SPEED: builtins.int
    """CRUISE_SET_SPEED"""
    CRUISE_THROTTLE: builtins.int
    """CRUISE_THROTTLE"""
    THROTTLE: builtins.int
    REGEN: builtins.int
    DRIVEMODE: builtins.int
    """DRIVEMODE"""
    def __init__(
        self,
        *,
        TIMESTAMP: builtins.int = ...,
        HANDBRAKE: builtins.bool | None = ...,
        BATT_ERROR: builtins.bool | None = ...,
        ENGINE_ERROR: builtins.bool | None = ...,
        HORN: builtins.bool | None = ...,
        BMS_REMAINING_CHARGE_TIME: builtins.int | None = ...,
        BMS_CHARGE_EN: builtins.bool | None = ...,
        BMS_SYSTEM_STATE: builtins.int | None = ...,
        BMS_PACK_C_RATE: builtins.int | None = ...,
        BMS_SOC: builtins.int | None = ...,
        BMS_SOH: builtins.int | None = ...,
        BMS_CELLS_CONNECTED: builtins.int | None = ...,
        BMS_REMAINING_ENERGY: builtins.int | None = ...,
        BMS_RELAY_FAULT: builtins.bool | None = ...,
        BMS_K3_RELAY_STATE: builtins.bool | None = ...,
        BMS_K2_RELAY_STATE: builtins.bool | None = ...,
        BMS_K1_RELAY_STATE: builtins.bool | None = ...,
        BMS_BATTERY_IN_FAULT_STATE: builtins.bool | None = ...,
        BMS_PACK_TEMP_HIGH: builtins.int | None = ...,
        BMS_LMU_W_HIGHEST_TEMP: builtins.int | None = ...,
        BMS_PACK_TEMP_LOW: builtins.int | None = ...,
        BMS_LMU_W_LOWEST_TEMP: builtins.int | None = ...,
        BMS_POST_PROC_2: builtins.int | None = ...,
        BMS_CELL_VOLTAGE_MAX: builtins.int | None = ...,
        BMS_CELL_W_HIGHEST_VOLTAGE: builtins.int | None = ...,
        BMS_CELL_VOLTAGE_MIN: builtins.int | None = ...,
        BMS_CELL_W_LOWEST_VOLTAGE: builtins.int | None = ...,
        BMS_AVG_CELL_VOLTAGE: builtins.int | None = ...,
        BMS_PACK_VOLTAGE: builtins.int | None = ...,
        BMS_PACK_CURRENT: builtins.int | None = ...,
        BMS_ERROR_FLAGS: builtins.int | None = ...,
        BMS_WARNING_FLAGS: builtins.int | None = ...,
        MPPT_1_Current_IN: builtins.float | None = ...,
        MPPT_1_Voltage_IN: builtins.float | None = ...,
        MPPT_1_Voltage_OUT: builtins.float | None = ...,
        MPPT_1_MOSFET_TEMP: builtins.int | None = ...,
        MPPT_1_PCB_TEMP: builtins.int | None = ...,
        MPPT_1_Power_IN: builtins.float | None = ...,
        MPPT_2_Current_IN: builtins.float | None = ...,
        MPPT_2_Voltage_IN: builtins.float | None = ...,
        MPPT_2_Voltage_OUT: builtins.float | None = ...,
        MPPT_2_MOSFET_TEMP: builtins.int | None = ...,
        MPPT_2_PCB_TEMP: builtins.int | None = ...,
        MPPT_2_Power_IN: builtins.float | None = ...,
        MPPT_3_Current_IN: builtins.float | None = ...,
        MPPT_3_Voltage_IN: builtins.float | None = ...,
        MPPT_3_Voltage_OUT: builtins.float | None = ...,
        MPPT_3_MOSFET_TEMP: builtins.int | None = ...,
        MPPT_3_PCB_TEMP: builtins.int | None = ...,
        MPPT_3_Power_IN: builtins.float | None = ...,
        MPPT_4_Current_IN: builtins.float | None = ...,
        MPPT_4_Voltage_IN: builtins.float | None = ...,
        MPPT_4_Voltage_OUT: builtins.float | None = ...,
        MPPT_4_MOSFET_TEMP: builtins.int | None = ...,
        MPPT_4_PCB_TEMP: builtins.int | None = ...,
        MPPT_4_Power_IN: builtins.float | None = ...,
        STOP: builtins.bool | None = ...,
        LOW_BEAM: builtins.bool | None = ...,
        HIGH_BEAM: builtins.bool | None = ...,
        RIGHT_INDICATOR: builtins.bool | None = ...,
        LEFT_INDICATOR: builtins.bool | None = ...,
        PARK: builtins.bool | None = ...,
        INTERIOR: builtins.bool | None = ...,
        HAZARD: builtins.bool | None = ...,
        GPS_LATITUDE: builtins.float | None = ...,
        GPS_LATITUDE_DIRECTION: builtins.str | None = ...,
        GPS_LONGITUDE: builtins.float | None = ...,
        GPS_LONGITUDE_DIRECTION: builtins.str | None = ...,
        GPS_ALTITUDE: builtins.float | None = ...,
        GPS_SPEED_KNOTS: builtins.float | None = ...,
        GPS_SPEED_KILOMETERS: builtins.float | None = ...,
        GPS_SATELLITES_NUMBER: builtins.int | None = ...,
        GPS_QUALITY: builtins.int | None = ...,
        PRESSURE_FRONT_LEFT: builtins.int | None = ...,
        PRESSURE_FRONT_RIGHT: builtins.int | None = ...,
        PRESSURE_REAR_LEFT: builtins.int | None = ...,
        PRESSURE_REAR_RIGHT: builtins.int | None = ...,
        TEMP_LEFT_MOTOR: builtins.float | None = ...,
        TEMP_RIGHT_MOTOR: builtins.float | None = ...,
        TEMP_RIGHT_DRIVER: builtins.float | None = ...,
        TEMP_LEFT_DRIVER: builtins.float | None = ...,
        MAIN_SWITCH: builtins.bool | None = ...,
        CRUISE_ON: builtins.bool | None = ...,
        CRUISE_ACTIVE: builtins.bool | None = ...,
        CRUISE_SET_SPEED: builtins.int | None = ...,
        CRUISE_THROTTLE: builtins.int | None = ...,
        THROTTLE: builtins.int | None = ...,
        REGEN: builtins.int | None = ...,
        DRIVEMODE: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["BATT_ERROR", b"BATT_ERROR", "BMS_AVG_CELL_VOLTAGE", b"BMS_AVG_CELL_VOLTAGE", "BMS_BATTERY_IN_FAULT_STATE", b"BMS_BATTERY_IN_FAULT_STATE", "BMS_CELLS_CONNECTED", b"BMS_CELLS_CONNECTED", "BMS_CELL_VOLTAGE_MAX", b"BMS_CELL_VOLTAGE_MAX", "BMS_CELL_VOLTAGE_MIN", b"BMS_CELL_VOLTAGE_MIN", "BMS_CELL_W_HIGHEST_VOLTAGE", b"BMS_CELL_W_HIGHEST_VOLTAGE", "BMS_CELL_W_LOWEST_VOLTAGE", b"BMS_CELL_W_LOWEST_VOLTAGE", "BMS_CHARGE_EN", b"BMS_CHARGE_EN", "BMS_ERROR_FLAGS", b"BMS_ERROR_FLAGS", "BMS_K1_RELAY_STATE", b"BMS_K1_RELAY_STATE", "BMS_K2_RELAY_STATE", b"BMS_K2_RELAY_STATE", "BMS_K3_RELAY_STATE", b"BMS_K3_RELAY_STATE", "BMS_LMU_W_HIGHEST_TEMP", b"BMS_LMU_W_HIGHEST_TEMP", "BMS_LMU_W_LOWEST_TEMP", b"BMS_LMU_W_LOWEST_TEMP", "BMS_PACK_CURRENT", b"BMS_PACK_CURRENT", "BMS_PACK_C_RATE", b"BMS_PACK_C_RATE", "BMS_PACK_TEMP_HIGH", b"BMS_PACK_TEMP_HIGH", "BMS_PACK_TEMP_LOW", b"BMS_PACK_TEMP_LOW", "BMS_PACK_VOLTAGE", b"BMS_PACK_VOLTAGE", "BMS_POST_PROC_2", b"BMS_POST_PROC_2", "BMS_RELAY_FAULT", b"BMS_RELAY_FAULT", "BMS_REMAINING_CHARGE_TIME", b"BMS_REMAINING_CHARGE_TIME", "BMS_REMAINING_ENERGY", b"BMS_REMAINING_ENERGY", "BMS_SOC", b"BMS_SOC", "BMS_SOH", b"BMS_SOH", "BMS_SYSTEM_STATE", b"BMS_SYSTEM_STATE", "BMS_WARNING_FLAGS", b"BMS_WARNING_FLAGS", "CRUISE_ACTIVE", b"CRUISE_ACTIVE", "CRUISE_ON", b"CRUISE_ON", "CRUISE_SET_SPEED", b"CRUISE_SET_SPEED", "CRUISE_THROTTLE", b"CRUISE_THROTTLE", "DRIVEMODE", b"DRIVEMODE", "ENGINE_ERROR", b"ENGINE_ERROR", "GPS_ALTITUDE", b"GPS_ALTITUDE", "GPS_LATITUDE", b"GPS_LATITUDE", "GPS_LATITUDE_DIRECTION", b"GPS_LATITUDE_DIRECTION", "GPS_LONGITUDE", b"GPS_LONGITUDE", "GPS_LONGITUDE_DIRECTION", b"GPS_LONGITUDE_DIRECTION", "GPS_QUALITY", b"GPS_QUALITY", "GPS_SATELLITES_NUMBER", b"GPS_SATELLITES_NUMBER", "GPS_SPEED_KILOMETERS", b"GPS_SPEED_KILOMETERS", "GPS_SPEED_KNOTS", b"GPS_SPEED_KNOTS", "HANDBRAKE", b"HANDBRAKE", "HAZARD", b"HAZARD", "HIGH_BEAM", b"HIGH_BEAM", "HORN", b"HORN", "INTERIOR", b"INTERIOR", "LEFT_INDICATOR", b"LEFT_INDICATOR", "LOW_BEAM", b"LOW_BEAM", "MAIN_SWITCH", b"MAIN_SWITCH", "MPPT_1_Current_IN", b"MPPT_1_Current_IN", "MPPT_1_MOSFET_TEMP", b"MPPT_1_MOSFET_TEMP", "MPPT_1_PCB_TEMP", b"MPPT_1_PCB_TEMP", "MPPT_1_Power_IN", b"MPPT_1_Power_IN", "MPPT_1_Voltage_IN", b"MPPT_1_Voltage_IN", "MPPT_1_Voltage_OUT", b"MPPT_1_Voltage_OUT", "MPPT_2_Current_IN", b"MPPT_2_Current_IN", "MPPT_2_MOSFET_TEMP", b"MPPT_2_MOSFET_TEMP", "MPPT_2_PCB_TEMP", b"MPPT_2_PCB_TEMP", "MPPT_2_Power_IN", b"MPPT_2_Power_IN", "MPPT_2_Voltage_IN", b"MPPT_2_Voltage_IN", "MPPT_2_Voltage_OUT", b"MPPT_2_Voltage_OUT", "MPPT_3_Current_IN", b"MPPT_3_Current_IN", "MPPT_3_MOSFET_TEMP", b"MPPT_3_MOSFET_TEMP", "MPPT_3_PCB_TEMP", b"MPPT_3_PCB_TEMP", "MPPT_3_Power_IN", b"MPPT_3_Power_IN", "MPPT_3_Voltage_IN", b"MPPT_3_Voltage_IN", "MPPT_3_Voltage_OUT", b"MPPT_3_Voltage_OUT", "MPPT_4_Current_IN", b"MPPT_4_Current_IN", "MPPT_4_MOSFET_TEMP", b"MPPT_4_MOSFET_TEMP", "MPPT_4_PCB_TEMP", b"MPPT_4_PCB_TEMP", "MPPT_4_Power_IN", b"MPPT_4_Power_IN", "MPPT_4_Voltage_IN", b"MPPT_4_Voltage_IN", "MPPT_4_Voltage_OUT", b"MPPT_4_Voltage_OUT", "PARK", b"PARK", "PRESSURE_FRONT_LEFT", b"PRESSURE_FRONT_LEFT", "PRESSURE_FRONT_RIGHT", b"PRESSURE_FRONT_RIGHT", "PRESSURE_REAR_LEFT", b"PRESSURE_REAR_LEFT", "PRESSURE_REAR_RIGHT", b"PRESSURE_REAR_RIGHT", "REGEN", b"REGEN", "RIGHT_INDICATOR", b"RIGHT_INDICATOR", "STOP", b"STOP", "TEMP_LEFT_DRIVER", b"TEMP_LEFT_DRIVER", "TEMP_LEFT_MOTOR", b"TEMP_LEFT_MOTOR", "TEMP_RIGHT_DRIVER", b"TEMP_RIGHT_DRIVER", "TEMP_RIGHT_MOTOR", b"TEMP_RIGHT_MOTOR", "THROTTLE", b"THROTTLE", "_BATT_ERROR", b"_BATT_ERROR", "_BMS_AVG_CELL_VOLTAGE", b"_BMS_AVG_CELL_VOLTAGE", "_BMS_BATTERY_IN_FAULT_STATE", b"_BMS_BATTERY_IN_FAULT_STATE", "_BMS_CELLS_CONNECTED", b"_BMS_CELLS_CONNECTED", "_BMS_CELL_VOLTAGE_MAX", b"_BMS_CELL_VOLTAGE_MAX", "_BMS_CELL_VOLTAGE_MIN", b"_BMS_CELL_VOLTAGE_MIN", "_BMS_CELL_W_HIGHEST_VOLTAGE", b"_BMS_CELL_W_HIGHEST_VOLTAGE", "_BMS_CELL_W_LOWEST_VOLTAGE", b"_BMS_CELL_W_LOWEST_VOLTAGE", "_BMS_CHARGE_EN", b"_BMS_CHARGE_EN", "_BMS_ERROR_FLAGS", b"_BMS_ERROR_FLAGS", "_BMS_K1_RELAY_STATE", b"_BMS_K1_RELAY_STATE", "_BMS_K2_RELAY_STATE", b"_BMS_K2_RELAY_STATE", "_BMS_K3_RELAY_STATE", b"_BMS_K3_RELAY_STATE", "_BMS_LMU_W_HIGHEST_TEMP", b"_BMS_LMU_W_HIGHEST_TEMP", "_BMS_LMU_W_LOWEST_TEMP", b"_BMS_LMU_W_LOWEST_TEMP", "_BMS_PACK_CURRENT", b"_BMS_PACK_CURRENT", "_BMS_PACK_C_RATE", b"_BMS_PACK_C_RATE", "_BMS_PACK_TEMP_HIGH", b"_BMS_PACK_TEMP_HIGH", "_BMS_PACK_TEMP_LOW", b"_BMS_PACK_TEMP_LOW", "_BMS_PACK_VOLTAGE", b"_BMS_PACK_VOLTAGE", "_BMS_POST_PROC_2", b"_BMS_POST_PROC_2", "_BMS_RELAY_FAULT", b"_BMS_RELAY_FAULT", "_BMS_REMAINING_CHARGE_TIME", b"_BMS_REMAINING_CHARGE_TIME", "_BMS_REMAINING_ENERGY", b"_BMS_REMAINING_ENERGY", "_BMS_SOC", b"_BMS_SOC", "_BMS_SOH", b"_BMS_SOH", "_BMS_SYSTEM_STATE", b"_BMS_SYSTEM_STATE", "_BMS_WARNING_FLAGS", b"_BMS_WARNING_FLAGS", "_CRUISE_ACTIVE", b"_CRUISE_ACTIVE", "_CRUISE_ON", b"_CRUISE_ON", "_CRUISE_SET_SPEED", b"_CRUISE_SET_SPEED", "_CRUISE_THROTTLE", b"_CRUISE_THROTTLE", "_DRIVEMODE", b"_DRIVEMODE", "_ENGINE_ERROR", b"_ENGINE_ERROR", "_GPS_ALTITUDE", b"_GPS_ALTITUDE", "_GPS_LATITUDE", b"_GPS_LATITUDE", "_GPS_LATITUDE_DIRECTION", b"_GPS_LATITUDE_DIRECTION", "_GPS_LONGITUDE", b"_GPS_LONGITUDE", "_GPS_LONGITUDE_DIRECTION", b"_GPS_LONGITUDE_DIRECTION", "_GPS_QUALITY", b"_GPS_QUALITY", "_GPS_SATELLITES_NUMBER", b"_GPS_SATELLITES_NUMBER", "_GPS_SPEED_KILOMETERS", b"_GPS_SPEED_KILOMETERS", "_GPS_SPEED_KNOTS", b"_GPS_SPEED_KNOTS", "_HANDBRAKE", b"_HANDBRAKE", "_HAZARD", b"_HAZARD", "_HIGH_BEAM", b"_HIGH_BEAM", "_HORN", b"_HORN", "_INTERIOR", b"_INTERIOR", "_LEFT_INDICATOR", b"_LEFT_INDICATOR", "_LOW_BEAM", b"_LOW_BEAM", "_MAIN_SWITCH", b"_MAIN_SWITCH", "_MPPT_1_Current_IN", b"_MPPT_1_Current_IN", "_MPPT_1_MOSFET_TEMP", b"_MPPT_1_MOSFET_TEMP", "_MPPT_1_PCB_TEMP", b"_MPPT_1_PCB_TEMP", "_MPPT_1_Power_IN", b"_MPPT_1_Power_IN", "_MPPT_1_Voltage_IN", b"_MPPT_1_Voltage_IN", "_MPPT_1_Voltage_OUT", b"_MPPT_1_Voltage_OUT", "_MPPT_2_Current_IN", b"_MPPT_2_Current_IN", "_MPPT_2_MOSFET_TEMP", b"_MPPT_2_MOSFET_TEMP", "_MPPT_2_PCB_TEMP", b"_MPPT_2_PCB_TEMP", "_MPPT_2_Power_IN", b"_MPPT_2_Power_IN", "_MPPT_2_Voltage_IN", b"_MPPT_2_Voltage_IN", "_MPPT_2_Voltage_OUT", b"_MPPT_2_Voltage_OUT", "_MPPT_3_Current_IN", b"_MPPT_3_Current_IN", "_MPPT_3_MOSFET_TEMP", b"_MPPT_3_MOSFET_TEMP", "_MPPT_3_PCB_TEMP", b"_MPPT_3_PCB_TEMP", "_MPPT_3_Power_IN", b"_MPPT_3_Power_IN", "_MPPT_3_Voltage_IN", b"_MPPT_3_Voltage_IN", "_MPPT_3_Voltage_OUT", b"_MPPT_3_Voltage_OUT", "_MPPT_4_Current_IN", b"_MPPT_4_Current_IN", "_MPPT_4_MOSFET_TEMP", b"_MPPT_4_MOSFET_TEMP", "_MPPT_4_PCB_TEMP", b"_MPPT_4_PCB_TEMP", "_MPPT_4_Power_IN", b"_MPPT_4_Power_IN", "_MPPT_4_Voltage_IN", b"_MPPT_4_Voltage_IN", "_MPPT_4_Voltage_OUT", b"_MPPT_4_Voltage_OUT", "_PARK", b"_PARK", "_PRESSURE_FRONT_LEFT", b"_PRESSURE_FRONT_LEFT", "_PRESSURE_FRONT_RIGHT", b"_PRESSURE_FRONT_RIGHT", "_PRESSURE_REAR_LEFT", b"_PRESSURE_REAR_LEFT", "_PRESSURE_REAR_RIGHT", b"_PRESSURE_REAR_RIGHT", "_REGEN", b"_REGEN", "_RIGHT_INDICATOR", b"_RIGHT_INDICATOR", "_STOP", b"_STOP", "_TEMP_LEFT_DRIVER", b"_TEMP_LEFT_DRIVER", "_TEMP_LEFT_MOTOR", b"_TEMP_LEFT_MOTOR", "_TEMP_RIGHT_DRIVER", b"_TEMP_RIGHT_DRIVER", "_TEMP_RIGHT_MOTOR", b"_TEMP_RIGHT_MOTOR", "_THROTTLE", b"_THROTTLE"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["BATT_ERROR", b"BATT_ERROR", "BMS_AVG_CELL_VOLTAGE", b"BMS_AVG_CELL_VOLTAGE", "BMS_BATTERY_IN_FAULT_STATE", b"BMS_BATTERY_IN_FAULT_STATE", "BMS_CELLS_CONNECTED", b"BMS_CELLS_CONNECTED", "BMS_CELL_VOLTAGE_MAX", b"BMS_CELL_VOLTAGE_MAX", "BMS_CELL_VOLTAGE_MIN", b"BMS_CELL_VOLTAGE_MIN", "BMS_CELL_W_HIGHEST_VOLTAGE", b"BMS_CELL_W_HIGHEST_VOLTAGE", "BMS_CELL_W_LOWEST_VOLTAGE", b"BMS_CELL_W_LOWEST_VOLTAGE", "BMS_CHARGE_EN", b"BMS_CHARGE_EN", "BMS_ERROR_FLAGS", b"BMS_ERROR_FLAGS", "BMS_K1_RELAY_STATE", b"BMS_K1_RELAY_STATE", "BMS_K2_RELAY_STATE", b"BMS_K2_RELAY_STATE", "BMS_K3_RELAY_STATE", b"BMS_K3_RELAY_STATE", "BMS_LMU_W_HIGHEST_TEMP", b"BMS_LMU_W_HIGHEST_TEMP", "BMS_LMU_W_LOWEST_TEMP", b"BMS_LMU_W_LOWEST_TEMP", "BMS_PACK_CURRENT", b"BMS_PACK_CURRENT", "BMS_PACK_C_RATE", b"BMS_PACK_C_RATE", "BMS_PACK_TEMP_HIGH", b"BMS_PACK_TEMP_HIGH", "BMS_PACK_TEMP_LOW", b"BMS_PACK_TEMP_LOW", "BMS_PACK_VOLTAGE", b"BMS_PACK_VOLTAGE", "BMS_POST_PROC_2", b"BMS_POST_PROC_2", "BMS_RELAY_FAULT", b"BMS_RELAY_FAULT", "BMS_REMAINING_CHARGE_TIME", b"BMS_REMAINING_CHARGE_TIME", "BMS_REMAINING_ENERGY", b"BMS_REMAINING_ENERGY", "BMS_SOC", b"BMS_SOC", "BMS_SOH", b"BMS_SOH", "BMS_SYSTEM_STATE", b"BMS_SYSTEM_STATE", "BMS_WARNING_FLAGS", b"BMS_WARNING_FLAGS", "CRUISE_ACTIVE", b"CRUISE_ACTIVE", "CRUISE_ON", b"CRUISE_ON", "CRUISE_SET_SPEED", b"CRUISE_SET_SPEED", "CRUISE_THROTTLE", b"CRUISE_THROTTLE", "DRIVEMODE", b"DRIVEMODE", "ENGINE_ERROR", b"ENGINE_ERROR", "GPS_ALTITUDE", b"GPS_ALTITUDE", "GPS_LATITUDE", b"GPS_LATITUDE", "GPS_LATITUDE_DIRECTION", b"GPS_LATITUDE_DIRECTION", "GPS_LONGITUDE", b"GPS_LONGITUDE", "GPS_LONGITUDE_DIRECTION", b"GPS_LONGITUDE_DIRECTION", "GPS_QUALITY", b"GPS_QUALITY", "GPS_SATELLITES_NUMBER", b"GPS_SATELLITES_NUMBER", "GPS_SPEED_KILOMETERS", b"GPS_SPEED_KILOMETERS", "GPS_SPEED_KNOTS", b"GPS_SPEED_KNOTS", "HANDBRAKE", b"HANDBRAKE", "HAZARD", b"HAZARD", "HIGH_BEAM", b"HIGH_BEAM", "HORN", b"HORN", "INTERIOR", b"INTERIOR", "LEFT_INDICATOR", b"LEFT_INDICATOR", "LOW_BEAM", b"LOW_BEAM", "MAIN_SWITCH", b"MAIN_SWITCH", "MPPT_1_Current_IN", b"MPPT_1_Current_IN", "MPPT_1_MOSFET_TEMP", b"MPPT_1_MOSFET_TEMP", "MPPT_1_PCB_TEMP", b"MPPT_1_PCB_TEMP", "MPPT_1_Power_IN", b"MPPT_1_Power_IN", "MPPT_1_Voltage_IN", b"MPPT_1_Voltage_IN", "MPPT_1_Voltage_OUT", b"MPPT_1_Voltage_OUT", "MPPT_2_Current_IN", b"MPPT_2_Current_IN", "MPPT_2_MOSFET_TEMP", b"MPPT_2_MOSFET_TEMP", "MPPT_2_PCB_TEMP", b"MPPT_2_PCB_TEMP", "MPPT_2_Power_IN", b"MPPT_2_Power_IN", "MPPT_2_Voltage_IN", b"MPPT_2_Voltage_IN", "MPPT_2_Voltage_OUT", b"MPPT_2_Voltage_OUT", "MPPT_3_Current_IN", b"MPPT_3_Current_IN", "MPPT_3_MOSFET_TEMP", b"MPPT_3_MOSFET_TEMP", "MPPT_3_PCB_TEMP", b"MPPT_3_PCB_TEMP", "MPPT_3_Power_IN", b"MPPT_3_Power_IN", "MPPT_3_Voltage_IN", b"MPPT_3_Voltage_IN", "MPPT_3_Voltage_OUT", b"MPPT_3_Voltage_OUT", "MPPT_4_Current_IN", b"MPPT_4_Current_IN", "MPPT_4_MOSFET_TEMP", b"MPPT_4_MOSFET_TEMP", "MPPT_4_PCB_TEMP", b"MPPT_4_PCB_TEMP", "MPPT_4_Power_IN", b"MPPT_4_Power_IN", "MPPT_4_Voltage_IN", b"MPPT_4_Voltage_IN", "MPPT_4_Voltage_OUT", b"MPPT_4_Voltage_OUT", "PARK", b"PARK", "PRESSURE_FRONT_LEFT", b"PRESSURE_FRONT_LEFT", "PRESSURE_FRONT_RIGHT", b"PRESSURE_FRONT_RIGHT", "PRESSURE_REAR_LEFT", b"PRESSURE_REAR_LEFT", "PRESSURE_REAR_RIGHT", b"PRESSURE_REAR_RIGHT", "REGEN", b"REGEN", "RIGHT_INDICATOR", b"RIGHT_INDICATOR", "STOP", b"STOP", "TEMP_LEFT_DRIVER", b"TEMP_LEFT_DRIVER", "TEMP_LEFT_MOTOR", b"TEMP_LEFT_MOTOR", "TEMP_RIGHT_DRIVER", b"TEMP_RIGHT_DRIVER", "TEMP_RIGHT_MOTOR", b"TEMP_RIGHT_MOTOR", "THROTTLE", b"THROTTLE", "TIMESTAMP", b"TIMESTAMP", "_BATT_ERROR", b"_BATT_ERROR", "_BMS_AVG_CELL_VOLTAGE", b"_BMS_AVG_CELL_VOLTAGE", "_BMS_BATTERY_IN_FAULT_STATE", b"_BMS_BATTERY_IN_FAULT_STATE", "_BMS_CELLS_CONNECTED", b"_BMS_CELLS_CONNECTED", "_BMS_CELL_VOLTAGE_MAX", b"_BMS_CELL_VOLTAGE_MAX", "_BMS_CELL_VOLTAGE_MIN", b"_BMS_CELL_VOLTAGE_MIN", "_BMS_CELL_W_HIGHEST_VOLTAGE", b"_BMS_CELL_W_HIGHEST_VOLTAGE", "_BMS_CELL_W_LOWEST_VOLTAGE", b"_BMS_CELL_W_LOWEST_VOLTAGE", "_BMS_CHARGE_EN", b"_BMS_CHARGE_EN", "_BMS_ERROR_FLAGS", b"_BMS_ERROR_FLAGS", "_BMS_K1_RELAY_STATE", b"_BMS_K1_RELAY_STATE", "_BMS_K2_RELAY_STATE", b"_BMS_K2_RELAY_STATE", "_BMS_K3_RELAY_STATE", b"_BMS_K3_RELAY_STATE", "_BMS_LMU_W_HIGHEST_TEMP", b"_BMS_LMU_W_HIGHEST_TEMP", "_BMS_LMU_W_LOWEST_TEMP", b"_BMS_LMU_W_LOWEST_TEMP", "_BMS_PACK_CURRENT", b"_BMS_PACK_CURRENT", "_BMS_PACK_C_RATE", b"_BMS_PACK_C_RATE", "_BMS_PACK_TEMP_HIGH", b"_BMS_PACK_TEMP_HIGH", "_BMS_PACK_TEMP_LOW", b"_BMS_PACK_TEMP_LOW", "_BMS_PACK_VOLTAGE", b"_BMS_PACK_VOLTAGE", "_BMS_POST_PROC_2", b"_BMS_POST_PROC_2", "_BMS_RELAY_FAULT", b"_BMS_RELAY_FAULT", "_BMS_REMAINING_CHARGE_TIME", b"_BMS_REMAINING_CHARGE_TIME", "_BMS_REMAINING_ENERGY", b"_BMS_REMAINING_ENERGY", "_BMS_SOC", b"_BMS_SOC", "_BMS_SOH", b"_BMS_SOH", "_BMS_SYSTEM_STATE", b"_BMS_SYSTEM_STATE", "_BMS_WARNING_FLAGS", b"_BMS_WARNING_FLAGS", "_CRUISE_ACTIVE", b"_CRUISE_ACTIVE", "_CRUISE_ON", b"_CRUISE_ON", "_CRUISE_SET_SPEED", b"_CRUISE_SET_SPEED", "_CRUISE_THROTTLE", b"_CRUISE_THROTTLE", "_DRIVEMODE", b"_DRIVEMODE", "_ENGINE_ERROR", b"_ENGINE_ERROR", "_GPS_ALTITUDE", b"_GPS_ALTITUDE", "_GPS_LATITUDE", b"_GPS_LATITUDE", "_GPS_LATITUDE_DIRECTION", b"_GPS_LATITUDE_DIRECTION", "_GPS_LONGITUDE", b"_GPS_LONGITUDE", "_GPS_LONGITUDE_DIRECTION", b"_GPS_LONGITUDE_DIRECTION", "_GPS_QUALITY", b"_GPS_QUALITY", "_GPS_SATELLITES_NUMBER", b"_GPS_SATELLITES_NUMBER", "_GPS_SPEED_KILOMETERS", b"_GPS_SPEED_KILOMETERS", "_GPS_SPEED_KNOTS", b"_GPS_SPEED_KNOTS", "_HANDBRAKE", b"_HANDBRAKE", "_HAZARD", b"_HAZARD", "_HIGH_BEAM", b"_HIGH_BEAM", "_HORN", b"_HORN", "_INTERIOR", b"_INTERIOR", "_LEFT_INDICATOR", b"_LEFT_INDICATOR", "_LOW_BEAM", b"_LOW_BEAM", "_MAIN_SWITCH", b"_MAIN_SWITCH", "_MPPT_1_Current_IN", b"_MPPT_1_Current_IN", "_MPPT_1_MOSFET_TEMP", b"_MPPT_1_MOSFET_TEMP", "_MPPT_1_PCB_TEMP", b"_MPPT_1_PCB_TEMP", "_MPPT_1_Power_IN", b"_MPPT_1_Power_IN", "_MPPT_1_Voltage_IN", b"_MPPT_1_Voltage_IN", "_MPPT_1_Voltage_OUT", b"_MPPT_1_Voltage_OUT", "_MPPT_2_Current_IN", b"_MPPT_2_Current_IN", "_MPPT_2_MOSFET_TEMP", b"_MPPT_2_MOSFET_TEMP", "_MPPT_2_PCB_TEMP", b"_MPPT_2_PCB_TEMP", "_MPPT_2_Power_IN", b"_MPPT_2_Power_IN", "_MPPT_2_Voltage_IN", b"_MPPT_2_Voltage_IN", "_MPPT_2_Voltage_OUT", b"_MPPT_2_Voltage_OUT", "_MPPT_3_Current_IN", b"_MPPT_3_Current_IN", "_MPPT_3_MOSFET_TEMP", b"_MPPT_3_MOSFET_TEMP", "_MPPT_3_PCB_TEMP", b"_MPPT_3_PCB_TEMP", "_MPPT_3_Power_IN", b"_MPPT_3_Power_IN", "_MPPT_3_Voltage_IN", b"_MPPT_3_Voltage_IN", "_MPPT_3_Voltage_OUT", b"_MPPT_3_Voltage_OUT", "_MPPT_4_Current_IN", b"_MPPT_4_Current_IN", "_MPPT_4_MOSFET_TEMP", b"_MPPT_4_MOSFET_TEMP", "_MPPT_4_PCB_TEMP", b"_MPPT_4_PCB_TEMP", "_MPPT_4_Power_IN", b"_MPPT_4_Power_IN", "_MPPT_4_Voltage_IN", b"_MPPT_4_Voltage_IN", "_MPPT_4_Voltage_OUT", b"_MPPT_4_Voltage_OUT", "_PARK", b"_PARK", "_PRESSURE_FRONT_LEFT", b"_PRESSURE_FRONT_LEFT", "_PRESSURE_FRONT_RIGHT", b"_PRESSURE_FRONT_RIGHT", "_PRESSURE_REAR_LEFT", b"_PRESSURE_REAR_LEFT", "_PRESSURE_REAR_RIGHT", b"_PRESSURE_REAR_RIGHT", "_REGEN", b"_REGEN", "_RIGHT_INDICATOR", b"_RIGHT_INDICATOR", "_STOP", b"_STOP", "_TEMP_LEFT_DRIVER", b"_TEMP_LEFT_DRIVER", "_TEMP_LEFT_MOTOR", b"_TEMP_LEFT_MOTOR", "_TEMP_RIGHT_DRIVER", b"_TEMP_RIGHT_DRIVER", "_TEMP_RIGHT_MOTOR", b"_TEMP_RIGHT_MOTOR", "_THROTTLE", b"_THROTTLE"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BATT_ERROR", b"_BATT_ERROR"]) -> typing_extensions.Literal["BATT_ERROR"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_AVG_CELL_VOLTAGE", b"_BMS_AVG_CELL_VOLTAGE"]) -> typing_extensions.Literal["BMS_AVG_CELL_VOLTAGE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_BATTERY_IN_FAULT_STATE", b"_BMS_BATTERY_IN_FAULT_STATE"]) -> typing_extensions.Literal["BMS_BATTERY_IN_FAULT_STATE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_CELLS_CONNECTED", b"_BMS_CELLS_CONNECTED"]) -> typing_extensions.Literal["BMS_CELLS_CONNECTED"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_CELL_VOLTAGE_MAX", b"_BMS_CELL_VOLTAGE_MAX"]) -> typing_extensions.Literal["BMS_CELL_VOLTAGE_MAX"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_CELL_VOLTAGE_MIN", b"_BMS_CELL_VOLTAGE_MIN"]) -> typing_extensions.Literal["BMS_CELL_VOLTAGE_MIN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_CELL_W_HIGHEST_VOLTAGE", b"_BMS_CELL_W_HIGHEST_VOLTAGE"]) -> typing_extensions.Literal["BMS_CELL_W_HIGHEST_VOLTAGE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_CELL_W_LOWEST_VOLTAGE", b"_BMS_CELL_W_LOWEST_VOLTAGE"]) -> typing_extensions.Literal["BMS_CELL_W_LOWEST_VOLTAGE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_CHARGE_EN", b"_BMS_CHARGE_EN"]) -> typing_extensions.Literal["BMS_CHARGE_EN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_ERROR_FLAGS", b"_BMS_ERROR_FLAGS"]) -> typing_extensions.Literal["BMS_ERROR_FLAGS"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_K1_RELAY_STATE", b"_BMS_K1_RELAY_STATE"]) -> typing_extensions.Literal["BMS_K1_RELAY_STATE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_K2_RELAY_STATE", b"_BMS_K2_RELAY_STATE"]) -> typing_extensions.Literal["BMS_K2_RELAY_STATE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_K3_RELAY_STATE", b"_BMS_K3_RELAY_STATE"]) -> typing_extensions.Literal["BMS_K3_RELAY_STATE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_LMU_W_HIGHEST_TEMP", b"_BMS_LMU_W_HIGHEST_TEMP"]) -> typing_extensions.Literal["BMS_LMU_W_HIGHEST_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_LMU_W_LOWEST_TEMP", b"_BMS_LMU_W_LOWEST_TEMP"]) -> typing_extensions.Literal["BMS_LMU_W_LOWEST_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_PACK_CURRENT", b"_BMS_PACK_CURRENT"]) -> typing_extensions.Literal["BMS_PACK_CURRENT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_PACK_C_RATE", b"_BMS_PACK_C_RATE"]) -> typing_extensions.Literal["BMS_PACK_C_RATE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_PACK_TEMP_HIGH", b"_BMS_PACK_TEMP_HIGH"]) -> typing_extensions.Literal["BMS_PACK_TEMP_HIGH"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_PACK_TEMP_LOW", b"_BMS_PACK_TEMP_LOW"]) -> typing_extensions.Literal["BMS_PACK_TEMP_LOW"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_PACK_VOLTAGE", b"_BMS_PACK_VOLTAGE"]) -> typing_extensions.Literal["BMS_PACK_VOLTAGE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_POST_PROC_2", b"_BMS_POST_PROC_2"]) -> typing_extensions.Literal["BMS_POST_PROC_2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_RELAY_FAULT", b"_BMS_RELAY_FAULT"]) -> typing_extensions.Literal["BMS_RELAY_FAULT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_REMAINING_CHARGE_TIME", b"_BMS_REMAINING_CHARGE_TIME"]) -> typing_extensions.Literal["BMS_REMAINING_CHARGE_TIME"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_REMAINING_ENERGY", b"_BMS_REMAINING_ENERGY"]) -> typing_extensions.Literal["BMS_REMAINING_ENERGY"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_SOC", b"_BMS_SOC"]) -> typing_extensions.Literal["BMS_SOC"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_SOH", b"_BMS_SOH"]) -> typing_extensions.Literal["BMS_SOH"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_SYSTEM_STATE", b"_BMS_SYSTEM_STATE"]) -> typing_extensions.Literal["BMS_SYSTEM_STATE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_BMS_WARNING_FLAGS", b"_BMS_WARNING_FLAGS"]) -> typing_extensions.Literal["BMS_WARNING_FLAGS"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_CRUISE_ACTIVE", b"_CRUISE_ACTIVE"]) -> typing_extensions.Literal["CRUISE_ACTIVE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_CRUISE_ON", b"_CRUISE_ON"]) -> typing_extensions.Literal["CRUISE_ON"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_CRUISE_SET_SPEED", b"_CRUISE_SET_SPEED"]) -> typing_extensions.Literal["CRUISE_SET_SPEED"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_CRUISE_THROTTLE", b"_CRUISE_THROTTLE"]) -> typing_extensions.Literal["CRUISE_THROTTLE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_DRIVEMODE", b"_DRIVEMODE"]) -> typing_extensions.Literal["DRIVEMODE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ENGINE_ERROR", b"_ENGINE_ERROR"]) -> typing_extensions.Literal["ENGINE_ERROR"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_ALTITUDE", b"_GPS_ALTITUDE"]) -> typing_extensions.Literal["GPS_ALTITUDE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_LATITUDE", b"_GPS_LATITUDE"]) -> typing_extensions.Literal["GPS_LATITUDE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_LATITUDE_DIRECTION", b"_GPS_LATITUDE_DIRECTION"]) -> typing_extensions.Literal["GPS_LATITUDE_DIRECTION"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_LONGITUDE", b"_GPS_LONGITUDE"]) -> typing_extensions.Literal["GPS_LONGITUDE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_LONGITUDE_DIRECTION", b"_GPS_LONGITUDE_DIRECTION"]) -> typing_extensions.Literal["GPS_LONGITUDE_DIRECTION"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_QUALITY", b"_GPS_QUALITY"]) -> typing_extensions.Literal["GPS_QUALITY"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_SATELLITES_NUMBER", b"_GPS_SATELLITES_NUMBER"]) -> typing_extensions.Literal["GPS_SATELLITES_NUMBER"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_SPEED_KILOMETERS", b"_GPS_SPEED_KILOMETERS"]) -> typing_extensions.Literal["GPS_SPEED_KILOMETERS"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_GPS_SPEED_KNOTS", b"_GPS_SPEED_KNOTS"]) -> typing_extensions.Literal["GPS_SPEED_KNOTS"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_HANDBRAKE", b"_HANDBRAKE"]) -> typing_extensions.Literal["HANDBRAKE"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_HAZARD", b"_HAZARD"]) -> typing_extensions.Literal["HAZARD"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_HIGH_BEAM", b"_HIGH_BEAM"]) -> typing_extensions.Literal["HIGH_BEAM"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_HORN", b"_HORN"]) -> typing_extensions.Literal["HORN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_INTERIOR", b"_INTERIOR"]) -> typing_extensions.Literal["INTERIOR"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_LEFT_INDICATOR", b"_LEFT_INDICATOR"]) -> typing_extensions.Literal["LEFT_INDICATOR"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_LOW_BEAM", b"_LOW_BEAM"]) -> typing_extensions.Literal["LOW_BEAM"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MAIN_SWITCH", b"_MAIN_SWITCH"]) -> typing_extensions.Literal["MAIN_SWITCH"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_1_Current_IN", b"_MPPT_1_Current_IN"]) -> typing_extensions.Literal["MPPT_1_Current_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_1_MOSFET_TEMP", b"_MPPT_1_MOSFET_TEMP"]) -> typing_extensions.Literal["MPPT_1_MOSFET_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_1_PCB_TEMP", b"_MPPT_1_PCB_TEMP"]) -> typing_extensions.Literal["MPPT_1_PCB_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_1_Power_IN", b"_MPPT_1_Power_IN"]) -> typing_extensions.Literal["MPPT_1_Power_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_1_Voltage_IN", b"_MPPT_1_Voltage_IN"]) -> typing_extensions.Literal["MPPT_1_Voltage_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_1_Voltage_OUT", b"_MPPT_1_Voltage_OUT"]) -> typing_extensions.Literal["MPPT_1_Voltage_OUT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_2_Current_IN", b"_MPPT_2_Current_IN"]) -> typing_extensions.Literal["MPPT_2_Current_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_2_MOSFET_TEMP", b"_MPPT_2_MOSFET_TEMP"]) -> typing_extensions.Literal["MPPT_2_MOSFET_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_2_PCB_TEMP", b"_MPPT_2_PCB_TEMP"]) -> typing_extensions.Literal["MPPT_2_PCB_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_2_Power_IN", b"_MPPT_2_Power_IN"]) -> typing_extensions.Literal["MPPT_2_Power_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_2_Voltage_IN", b"_MPPT_2_Voltage_IN"]) -> typing_extensions.Literal["MPPT_2_Voltage_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_2_Voltage_OUT", b"_MPPT_2_Voltage_OUT"]) -> typing_extensions.Literal["MPPT_2_Voltage_OUT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_3_Current_IN", b"_MPPT_3_Current_IN"]) -> typing_extensions.Literal["MPPT_3_Current_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_3_MOSFET_TEMP", b"_MPPT_3_MOSFET_TEMP"]) -> typing_extensions.Literal["MPPT_3_MOSFET_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_3_PCB_TEMP", b"_MPPT_3_PCB_TEMP"]) -> typing_extensions.Literal["MPPT_3_PCB_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_3_Power_IN", b"_MPPT_3_Power_IN"]) -> typing_extensions.Literal["MPPT_3_Power_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_3_Voltage_IN", b"_MPPT_3_Voltage_IN"]) -> typing_extensions.Literal["MPPT_3_Voltage_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_3_Voltage_OUT", b"_MPPT_3_Voltage_OUT"]) -> typing_extensions.Literal["MPPT_3_Voltage_OUT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_4_Current_IN", b"_MPPT_4_Current_IN"]) -> typing_extensions.Literal["MPPT_4_Current_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_4_MOSFET_TEMP", b"_MPPT_4_MOSFET_TEMP"]) -> typing_extensions.Literal["MPPT_4_MOSFET_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_4_PCB_TEMP", b"_MPPT_4_PCB_TEMP"]) -> typing_extensions.Literal["MPPT_4_PCB_TEMP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_4_Power_IN", b"_MPPT_4_Power_IN"]) -> typing_extensions.Literal["MPPT_4_Power_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_4_Voltage_IN", b"_MPPT_4_Voltage_IN"]) -> typing_extensions.Literal["MPPT_4_Voltage_IN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_MPPT_4_Voltage_OUT", b"_MPPT_4_Voltage_OUT"]) -> typing_extensions.Literal["MPPT_4_Voltage_OUT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_PARK", b"_PARK"]) -> typing_extensions.Literal["PARK"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_PRESSURE_FRONT_LEFT", b"_PRESSURE_FRONT_LEFT"]) -> typing_extensions.Literal["PRESSURE_FRONT_LEFT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_PRESSURE_FRONT_RIGHT", b"_PRESSURE_FRONT_RIGHT"]) -> typing_extensions.Literal["PRESSURE_FRONT_RIGHT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_PRESSURE_REAR_LEFT", b"_PRESSURE_REAR_LEFT"]) -> typing_extensions.Literal["PRESSURE_REAR_LEFT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_PRESSURE_REAR_RIGHT", b"_PRESSURE_REAR_RIGHT"]) -> typing_extensions.Literal["PRESSURE_REAR_RIGHT"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_REGEN", b"_REGEN"]) -> typing_extensions.Literal["REGEN"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_RIGHT_INDICATOR", b"_RIGHT_INDICATOR"]) -> typing_extensions.Literal["RIGHT_INDICATOR"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_STOP", b"_STOP"]) -> typing_extensions.Literal["STOP"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_TEMP_LEFT_DRIVER", b"_TEMP_LEFT_DRIVER"]) -> typing_extensions.Literal["TEMP_LEFT_DRIVER"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_TEMP_LEFT_MOTOR", b"_TEMP_LEFT_MOTOR"]) -> typing_extensions.Literal["TEMP_LEFT_MOTOR"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_TEMP_RIGHT_DRIVER", b"_TEMP_RIGHT_DRIVER"]) -> typing_extensions.Literal["TEMP_RIGHT_DRIVER"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_TEMP_RIGHT_MOTOR", b"_TEMP_RIGHT_MOTOR"]) -> typing_extensions.Literal["TEMP_RIGHT_MOTOR"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_THROTTLE", b"_THROTTLE"]) -> typing_extensions.Literal["THROTTLE"] | None: ...

global___EagleTwo = EagleTwo

@typing_extensions.final
class EagleTwoSeries(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FRAME_FIELD_NUMBER: builtins.int
    @property
    def frame(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EagleTwo]: ...
    def __init__(
        self,
        *,
        frame: collections.abc.Iterable[global___EagleTwo] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["frame", b"frame"]) -> None: ...

global___EagleTwoSeries = EagleTwoSeries
